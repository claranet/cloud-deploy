#!/bin/bash
set -x

LOCK=/run/lock/ghost-stage-2
AWS_BIN=$(which aws)
if [ $? -ne 0 ]; then
    AWS_BIN='/usr/local/bin/aws'
fi

while [ -d $LOCK ] ; do
    ls -l $LOCK
    echo "Waiting 30s for $LOCK lock to be released..."
    sleep 30
done

mkdir $LOCK
echo "Locked $LOCK"

S3_BUCKET={{ bucket_s3 }}
S3_REGION={{ bucket_region }}
LOGDIR=/var/log/ghost/
LOGFILE=${LOGDIR}$(date +%Y%m%d_%H%M%S)_deploy.txt

COLOR_CLR='\033[0m'

COLOR_RED='\033[00;31m'
COLOR_GREEN='\033[00;32m'
COLOR_YELLOW='\033[00;33m'

function exit_deployment() {
    echo "Removing Manifest file" >> $LOGFILE
    rm -f /tmp/MANIFEST
    echo "Unlocking $LOCK..." | tee -a $LOGFILE
    rmdir $LOCK
    echo "Unlocked $LOCK" | tee -a $LOGFILE
    trap - EXIT
    notify_status $1
    if [ -z $1 ]; then
        exit -1
    else
        exit $1
    fi
}

set -e
trap exit_deployment EXIT TERM INT

INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
EC2_AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
EC2_REGION="$(echo "$EC2_AVAIL_ZONE" | sed 's/[a-z]$//')"

retry=1
while [ -z "$APP" ] || [ -z "$ENV" ] || [ -z "$ROLE" ] ; do
    echo "Waiting 2s for (app, env, role) tags to be set... (attempt ${retry}/150)"
    sleep 2

    TAGS=$($AWS_BIN ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" --region "$EC2_REGION")

    NAME=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["Name"] | select (.!=null)')
    APP=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["app"] | select (.!=null)')
    ENV=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["env"] | select (.!=null)')
    ROLE=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["role"] | select (.!=null)')
    COLOR=$(echo $TAGS | jq -r ".Tags[] | { key: .Key, value: .Value } | [.] | from_entries" | jq -r '.["color"] | select (.!=null)')

    ((retry++))
    if [ $retry -gt 150 ] ; then
        # After 5min, no more hope for tags...
        echo "[ERROR] Cannot retrieve instance tags, exiting."
        exit_deployment -1
    fi
done

if [ ! -d /ghost ]; then
    mkdir /ghost
fi

if [ ! -d /var/lib/ghost ]; then
    mkdir -p /var/lib/ghost
fi

if [ ! -d ${LOGDIR} ]; then
    mkdir -p ${LOGDIR}
fi

if [ ! -z "$COLOR" ]; then
    APP_PATH=ghost/$APP/$ENV/$ROLE/$COLOR
else
    APP_PATH=ghost/$APP/$ENV/$ROLE
fi

if [ -z $BOOTSTRAP_ENDPOINT ]; then
    BOOTSTRAP_ENDPOINT=https://status.cloudeploy.io/bootstrap
fi

IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
MAX_NAME=$(($(getconf HOST_NAME_MAX)-16))
EC2_HOSTNAME=$(echo ${NAME:0:$MAX_NAME}-${IP} | tr -s '.' '-')

function notify_status() {
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        status=$([ "$1" == 0 ] && echo "done" || echo "failed")
        bootstrap_payload=$(printf '{"status":"%s","return_code":"%s","hostname":"%s"}' "$status" "$1" "$EC2_HOSTNAME")
    else
        bootstrap_payload=$(printf '{"status":"%s","hostname":"%s"}' "$1" "$EC2_HOSTNAME")
    fi
    echo "Posting payload $bootstrap_payload to $BOOTSTRAP_ENDPOINT" >> $LOGFILE
    curl -H "Content-Type: application/json" -X POST -d $bootstrap_payload $BOOTSTRAP_ENDPOINT
}

set +e

function zabbix_hostname() {
    # Update Zabbix agent Hostname
    sed -i "s/.*Hostname=.*/&-${IP}/g" /etc/zabbix/zabbix_agentd.conf --follow-symlinks
    which systemctl 2> /dev/null && systemctl enable zabbix-agent || update-rc.d zabbix-agent enable 2 3 4 5
    service zabbix-agent restart
}

function instance_hostname() {
    echo "$EC2_HOSTNAME" > /etc/hostname
    which hostnamectl 2> /dev/null && hostnamectl set-hostname "$EC2_HOSTNAME" || hostname "$EC2_HOSTNAME"
    echo "$IP $EC2_HOSTNAME" >> /etc/hosts
    if [ -d /etc/cloud/templates ] ; then
        for f in /etc/cloud/templates/hosts.*.tmpl; do
            echo "$IP $EC2_HOSTNAME" >> "$f"
        done
    fi
}

if [ -z "$1" ] ; then
    zabbix_hostname
    instance_hostname
fi

function purge_latest_failed_deploy() {
    MODULE_NAME=$1
    MODULE_PATH=/ghost/$2
    FAILED="_failed"
    MODULE_FAILED=/var/lib/ghost/$MODULE_NAME$FAILED

    if [ -e $MODULE_FAILED ]; then
        MODULE_TO_DELETE=$(head -n 1 $MODULE_FAILED)
        echo "Purging latest failed module: $MODULE_TO_DELETE" >> $LOGFILE
        rm -rf $MODULE_TO_DELETE
        # Remove deleted module from history
        sed -i 1d $MODULE_FAILED
    fi
    # Append fail to the failed module deployment history
    echo $MODULE_PATH >> $MODULE_FAILED
}

function purge_oldest_succeed_deploy() {
    MODULE_NAME=$1
    MODULE_PATH=/ghost/$2
    SUCCEED="_succeed"
    MODULE_SUCCEED=/var/lib/ghost/$MODULE_NAME$SUCCEED
    MAX_DEPLOY_HISTORY="{{ max_deploy_history }}"

    if [ -e $MODULE_SUCCEED ]; then
        NUM_OF_DEPLOY=$(wc -l < $MODULE_SUCCEED)
        while [ $NUM_OF_DEPLOY -gt $MAX_DEPLOY_HISTORY ]; do
            MODULE_TO_DELETE=$(head -n 1 $MODULE_SUCCEED)
            echo "Purging oldest succeed module: $MODULE_TO_DELETE" >> $LOGFILE
            rm -rf $MODULE_TO_DELETE
            # Remove deleted module from history
            sed -i 1d $MODULE_SUCCEED
            NUM_OF_DEPLOY=$(wc -l < $MODULE_SUCCEED)
        done
    fi
    # Append succeed to the succeed module deployment history
    echo $MODULE_PATH >> $MODULE_SUCCEED
}

function deploy_module() {
    UUID=$(cat /proc/sys/kernel/random/uuid)
    MODULE_NAME=$1
    if [ -z $MODULE_NAME ]; then
        echo "MODULE_NAME cannot be empty"
        exit_deployment -10
    fi
    MODULE_FILE=$2
    if [ -z $MODULE_FILE ]; then
        echo "MODULE_FILE cannot be empty"
        exit_deployment -10
    fi
    TARGET=$3
    if [ -z $TARGET ]; then
        echo "TARGET cannot be empty"
        exit_deployment -10
    fi
    if [ ${TARGET%%+(/)} == "/tmp" ]; then
        echo "TARGET path cannot be /tmp"
        exit_deployment -10
    fi
    TARGETDIR=$(dirname $TARGET)
    if [ ! -d $TARGETDIR ]; then
        mkdir -p $TARGETDIR
    fi

    echo "--------------------------------" >> $LOGFILE
    echo "Deploying module $MODULE_NAME in $TARGET" >> $LOGFILE

    $AWS_BIN s3 cp --only-show-errors s3://${S3_BUCKET}/${APP_PATH}/$MODULE_NAME/$MODULE_FILE /tmp/$MODULE_FILE --region "$S3_REGION"

    mkdir -p /ghost/$UUID
    echo "Extracting module in /ghost/$UUID" >> $LOGFILE
    tar --warning=no-timestamp -xvzf /tmp/$MODULE_FILE -C /ghost/$UUID > /dev/null
    if [ $? -ne 0 ] || [ ! -f /tmp/$MODULE_FILE ]; then
        echo "Extracting module failed !"
        exit_deployment -11
    fi

    rm -rf /tmp/$MODULE_FILE
    cd /ghost/$UUID

    if [ -e ".ghost-metadata" ]; then
        source ".ghost-metadata"
    fi

    if [ -e predeploy ]; then
        echo "Executing predeploy script..." >> $LOGFILE
        chmod +x predeploy
        GHOST_MODULE_REPO=$GHOST_MODULE_REPO GHOST_MODULE_REV=$GHOST_MODULE_REV GHOST_MODULE_COMMIT=$GHOST_MODULE_COMMIT GHOST_MODULE_COMMIT_MESSAGE=$GHOST_MODULE_COMMIT_MESSAGE GHOST_MODULE_USER=$GHOST_MODULE_USER GHOST_APP=$APP GHOST_ENV=$ENV GHOST_ENV_COLOR=$COLOR GHOST_ROLE=$ROLE GHOST_MODULE_NAME=$MODULE_NAME GHOST_MODULE_PATH=$TARGET ./predeploy 2>&1 | tee -a $LOGFILE
        local status=${PIPESTATUS[0]}
        if [ $status -ne 0 ]; then
            echo -e "${COLOR_RED}[${MODULE_NAME}:${GHOST_MODULE_REV}] Predeploy script exited with error code ${status} ${COLOR_CLR}"
            purge_latest_failed_deploy $MODULE_NAME $UUID
            exit_deployment -12
        fi
        rm -vf ./predeploy
    fi

    # Clear folder if not a symlink (not a Ghost managed module)
    if ! [ -h $TARGET ]; then
        echo "Clearing unmanaged folder..." >> $LOGFILE
        rm -rfv $TARGET
    fi

    # Replace old module after pre-deploy and before post-deploy
    ln -fsn /ghost/$UUID $TARGET
    cd $TARGET

    if [ -e postdeploy ]; then
        echo "Executing postdeploy script..." >> $LOGFILE
        chmod +x postdeploy

        GHOST_MODULE_REPO=$GHOST_MODULE_REPO GHOST_MODULE_REV=$GHOST_MODULE_REV GHOST_MODULE_COMMIT=$GHOST_MODULE_COMMIT GHOST_MODULE_COMMIT_MESSAGE=$GHOST_MODULE_COMMIT_MESSAGE GHOST_MODULE_USER=$GHOST_MODULE_USER GHOST_APP=$APP GHOST_ENV=$ENV GHOST_ENV_COLOR=$COLOR GHOST_ROLE=$ROLE GHOST_MODULE_NAME=$MODULE_NAME GHOST_MODULE_PATH=$TARGET ./postdeploy 2>&1 | tee -a $LOGFILE
        local status=${PIPESTATUS[0]}
        if [ $status -ne 0 ]; then
            echo -e "${COLOR_RED}[${MODULE_NAME}:${GHOST_MODULE_REV}] Postdeploy script exited with error code ${status} ${COLOR_CLR}"
            purge_latest_failed_deploy $MODULE_NAME $UUID
            exit_deployment -13
        fi
        rm -vf ./postdeploy
    fi

    purge_oldest_succeed_deploy $MODULE_NAME $UUID
}

function find_module() {
    for line in $(cat /tmp/MANIFEST)
      do
        MODULE_NAME=$(echo $line | awk -F':' '{print $1}')
        MODULE_FILE=$(echo $line | awk -F':' '{print $2}')
        TARGET=$(echo $line | awk -F':' '{print $3}')
        if [ "$1" == "$MODULE_NAME" ]; then
            echo $MODULE_NAME $MODULE_FILE $TARGET
        fi
    done
}

function download_and_run_lifecycle_hook_script() {
    local script_name=$1
    echo "Downloading custom vars script" >> $LOGFILE
    $AWS_BIN s3 cp --quiet s3://${S3_BUCKET}/${APP_PATH}/custom_env_vars /tmp/ghost_custom_env_vars --region "$S3_REGION"
    echo "Downloading ${script_name} script" >> $LOGFILE
    $AWS_BIN s3 cp --quiet s3://${S3_BUCKET}/${APP_PATH}/${script_name} /tmp/ghost_${script_name} --region "$S3_REGION"
    if [ -e /tmp/ghost_${script_name} ]; then
        if [ -e /tmp/ghost_custom_env_vars ]; then
            echo "Sourcing custom vars in env" >> $LOGFILE
            source /tmp/ghost_custom_env_vars
        fi
        echo "Executing /tmp/ghost_${script_name} script..." >> $LOGFILE
        chmod +x /tmp/ghost_${script_name}
        GHOST_APP=$APP GHOST_ENV=$ENV GHOST_ENV_COLOR=$COLOR GHOST_ROLE=$ROLE /tmp/ghost_${script_name} 2>&1 | tee -a $LOGFILE
        local status=${PIPESTATUS[0]}
        if [ $status -ne 0 ]; then
            exit_deployment -5
        fi
        if [ -e /tmp/ghost_custom_env_vars ]; then
            rm -vf /tmp/ghost_custom_env_vars
        fi
    fi
}

notify_status 'init'

echo "Downloading Manifest" >> $LOGFILE
$AWS_BIN s3 cp --only-show-errors s3://${S3_BUCKET}/${APP_PATH}/MANIFEST /tmp/ --region "$S3_REGION"

if [ $? -ne 0 ]; then
    echo "Manifest download error...Exiting" >> $LOGFILE
    # init zabbix before quit
    exit_deployment -3
fi

notify_status 'started'

if [ -n "$1" ]; then
    # Deploy only one module
    MODULE=$(find_module $1)
    deploy_module $MODULE
else
    download_and_run_lifecycle_hook_script 'pre_bootstrap'

    # Deploying all modules
    for line in $(cat /tmp/MANIFEST) ; do
        MODULE_NAME=$(echo $line | awk -F':' '{print $1}')
        MODULE_FILE=$(echo $line | awk -F':' '{print $2}')
        TARGET=$(echo $line | awk -F':' '{print $3}')
        deploy_module $MODULE_NAME $MODULE_FILE $TARGET
    done

    download_and_run_lifecycle_hook_script 'post_bootstrap'
fi

exit_deployment 0
